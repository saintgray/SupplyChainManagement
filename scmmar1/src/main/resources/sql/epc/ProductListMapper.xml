<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.happyjob.study.epc.dao.ProductListDao">
	<select id="getListProduct" parameterType="kr.happyjob.study.epc.model.SearchParamDTO" resultType="kr.happyjob.study.epc.model.SalesModel">
		SELECT 	* 
		FROM tb_sales
		<where> 
			price > 0
			<if test="salesType != null">
				and sales_type like #{salesType}
			</if>
			<if test="mfcomp != null">
				and mfcomp like #{mfcomp}
			</if>
			<if test="keywordProductList != null">
				and (sales_type like concat('%',#{keywordProductList},'%') or mfcomp like concat('%',#{keywordProductList},'%'))
			</if>
		</where>
		LIMIT #{startIndex}, #{pageBlockSize}
	</select>
	
	<select id="getListProductCnt" parameterType="kr.happyjob.study.epc.model.SearchParamDTO" resultType="int">
		SELECT 	COUNT(*) 
		FROM tb_sales
		<where> 
			price > 0
			<if test="salesType != null">
				and sales_type like #{salesType}
			</if>
			<if test="mfcomp != null">
				and mfcomp like #{mfcomp}
			</if>
			<if test="keywordProductList != null">
				and (sales_type like concat('%',#{keywordProductList},'%') or mfcomp like concat('%',#{keywordProductList},'%'))
			</if>
		</where>
	</select>
	
	<select id="getProductDetail" resultType="kr.happyjob.study.epc.model.SalesModel">
		SELECT *
		FROM tb_sales s
			LEFT OUTER JOIN tb_sales_file f ON s.sales_id = f.sales_id
		WHERE s.sales_id = #{sales_id} 
		LIMIT 1
	</select>
	
	
	<select id="getSalesTypeList"  parameterType="string" resultType="string">
		SELECT detail_name as sales_type 
		FROM tb_detail_code 
		WHERE group_code = 'proCD' 
			AND use_yn like 'Y'
	</select>
	
	
	<select id="getMfcompListBySalesType"  parameterType="hashmap" resultType="string">
		SELECT 
			distinct(mfcomp) 
			FROM tb_sales
			<where> 
				<if test="salesType != null">
					sales_type like #{salesType}
				</if>
			</where>
	</select>
	

	<insert id="addProductToCart"  parameterType="kr.happyjob.study.epc.model.ShoppingCartItemDTO">
		INSERT INTO tb_basket (loginID, sales_id, pur_cnt, wanteddate, purcYN )
			VALUES ( #{loginID}, #{sales_id}, #{pur_cnt}, #{wanted_date}, 'N')
	</insert>
		
	
	<insert id="orderProductPurchase"  parameterType="kr.happyjob.study.epc.model.ShoppingCartItemDTO">
		INSERT INTO
			    tb_purchase (loginID, depositYN)
		VALUES
			    (#{loginID}, 'Y')
	</insert>
	
	<insert id="orderProductPurchaseinfo"  parameterType="kr.happyjob.study.epc.model.ShoppingCartItemDTO">
		<selectKey resultType="int" keyProperty="pur_id" order="BEFORE">
		    SELECT distinct(last_insert_id()) FROM tb_purchase limit 1
		</selectKey>
		INSERT INTO
		    tb_purchaseinfo (pur_cnt, wanted_date, returnYN, pur_type, pur_id, loginID, sales_id)
		VALUES
		    (#{pur_cnt}, #{wanted_date}, 'N', '0', #{pur_id}, #{loginID}, #{sales_id})
	</insert>
	
	<select id="getCartItems"  parameterType="hashmap" resultType="kr.happyjob.study.epc.model.ShoppingCartItemDTO">
		SELECT 
			b.loginID, b.sales_id, b.pur_cnt, DATE_FORMAT(b.wanteddate, '%Y-%m-%d') as wanteddate
			FROM
				tb_basket b
			<where> 
				b.loginID like #{loginID}
				AND b.sales_id = #{sales_id}
				AND b.wanteddate like CONCAT(#{wanted_date},'%')
			</where>
	</select>
	
	<update id="updateCartItemCnt"  parameterType="kr.happyjob.study.epc.model.ShoppingCartItemDTO">
		UPDATE
			tb_basket b
		SET
			pur_cnt = #{pur_cnt}
		<where> 
			b.loginID like #{loginID}
			AND b.sales_id = #{sales_id}
		</where>
	</update>
	
	
</mapper>